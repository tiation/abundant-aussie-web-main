name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-client:
    name: Client Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install client dependencies
      run: |
        cd client
        npm ci
        
    - name: Run client linting
      run: |
        cd client
        npm run lint
        
    - name: Run client tests with coverage
      run: |
        cd client
        npm run test:ci
        
    - name: Upload client coverage
      uses: codecov/codecov-action@v3
      with:
        file: client/coverage/lcov.info
        flags: client
        name: client-coverage
        fail_ci_if_error: true

  test-server:
    name: Server Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: Run server linting
      run: |
        cd server
        npm run lint
        
    - name: Run server unit tests
      run: |
        cd server
        npm run test:unit
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        
    - name: Run server integration tests
      run: |
        cd server
        npm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        
    - name: Generate server coverage report
      run: |
        cd server
        npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        
    - name: Upload server coverage
      uses: codecov/codecov-action@v3
      with:
        file: server/coverage/lcov.info
        flags: server
        name: server-coverage
        fail_ci_if_error: true

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-client, test-server]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
          
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build client
      run: |
        cd client
        npm ci
        npm run build
        
    - name: Start server
      run: |
        cd server
        npm ci
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        PORT: 5000
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        
    - name: Serve client
      run: |
        cd client
        npm install -g serve
        serve -s dist -l 3000 &
        sleep 5
        
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        wait-on: 'http://localhost:3000, http://localhost:5000/health'
        wait-on-timeout: 120
        browser: chrome
        headless: true
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload E2E videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos
        
    - name: Upload E2E screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit (client)
      run: |
        cd client
        npm audit --audit-level=high
        
    - name: Run npm audit (server)
      run: |
        cd server
        npm audit --audit-level=high
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-client, test-server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate merged coverage report
      run: |
        npm run coverage:merge
        npm run coverage:report
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: coverage/cobertura-coverage.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 80
        fail_below_threshold: true
        show_missing_lines: true

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-client, test-server, test-e2e, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging..."
        # Add deployment commands here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-client, test-server, test-e2e, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production..."
        # Add deployment commands here
