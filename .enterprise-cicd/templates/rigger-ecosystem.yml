# Rigger Ecosystem Enterprise CI/CD Pipeline Template
# Version: 1.0.0
# Author: ChaseWhiteRabbit NGO / Tiation Enterprise
# Contact: tiatheone@protonmail.com, garrett@sxc.codes, garrett.dillman@gmail.com

name: Rigger Ecosystem CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: 'docker.sxc.codes:5000'
  NOTIFICATION_EMAILS: 'tiatheone@protonmail.com,garrett@sxc.codes,garrett.dillman@gmail.com'
  RIGGER_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  # ==============================================================================
  # STAGE 1: VALIDATION
  # ==============================================================================
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    outputs:
      project-type: ${{ steps.detect.outputs.project-type }}
      has-tests: ${{ steps.detect.outputs.has-tests }}
      has-dockerfile: ${{ steps.detect.outputs.has-dockerfile }}
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Detect Project Type
        id: detect
        run: |
          # Detect project type based on files
          if [ -f "package.json" ]; then
            if grep -q "next" package.json; then
              echo "project-type=nextjs" >> $GITHUB_OUTPUT
            elif grep -q "vite" package.json; then
              echo "project-type=vite" >> $GITHUB_OUTPUT
            elif grep -q "@capacitor/core" package.json; then
              echo "project-type=capacitor" >> $GITHUB_OUTPUT
            elif grep -q "express" package.json; then
              echo "project-type=backend" >> $GITHUB_OUTPUT
            elif grep -q "@rigger/shared" package.json; then
              echo "project-type=shared" >> $GITHUB_OUTPUT
            else
              echo "project-type=nodejs" >> $GITHUB_OUTPUT
            fi
          else
            echo "project-type=unknown" >> $GITHUB_OUTPUT
          fi
          
          # Check for tests
          if [ -d "tests" ] || [ -d "__tests__" ] || [ -d "cypress" ] || grep -q "\"test\":" package.json 2>/dev/null; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 🧪 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm install
          fi
      
      - name: 🔧 Validate Package Configuration
        run: |
          # Check Node.js version compatibility
          if [ -f "package.json" ]; then
            node_version=$(node -p "require('./package.json').engines?.node || '>=${{ env.NODE_VERSION }}.0.0'")
            echo "Required Node.js version: $node_version"
            
            # Validate .nvmrc exists
            if [ ! -f ".nvmrc" ]; then
              echo "Warning: .nvmrc file missing. Creating one..."
              echo "${{ env.NODE_VERSION }}" > .nvmrc
            fi
          fi

  # ==============================================================================
  # STAGE 2: SECURITY SCANNING
  # ==============================================================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🧪 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm install
          fi
      
      - name: 🔍 Run GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: 🛡️ Run Trivy Vulnerability Scanner
        if: needs.validate.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📋 Upload Trivy Results
        if: needs.validate.outputs.has-dockerfile == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🔒 NPM Security Audit
        run: |
          npm audit --audit-level moderate || {
            echo "Security vulnerabilities found. Attempting automatic fixes..."
            npm audit fix --audit-level moderate
            if [ $? -ne 0 ]; then
              echo "::warning::Security vulnerabilities found that require manual intervention"
            fi
          }
      
      - name: 📊 Generate Security Report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Timestamp: $(date)" >> security-report.md
          echo "## Project: $(basename $PWD)" >> security-report.md
          echo "## Branch: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "### NPM Audit Summary" >> security-report.md
          npm audit --audit-level low --json | jq -r '.vulnerabilities | keys | length' > /tmp/vuln_count
          echo "Total vulnerabilities found: $(cat /tmp/vuln_count)" >> security-report.md
      
      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_id }}
          path: security-report.md
          retention-days: 30

  # ==============================================================================
  # STAGE 3: TESTING
  # ==============================================================================
  test:
    name: 🧪 Automated Testing
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: needs.validate.outputs.has-tests == 'true'
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🧪 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm install
          fi
      
      - name: 🧪 Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          if npm run test:unit --if-present; then
            echo "Unit tests passed"
          elif npm test --if-present; then
            echo "General tests passed"
          else
            echo "No unit tests found, skipping..."
          fi
      
      - name: 🧪 Run Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          if npm run test:integration --if-present; then
            echo "Integration tests passed"
          else
            echo "No integration tests found, skipping..."
          fi
      
      - name: 🧪 Run E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          if npm run test:e2e --if-present; then
            echo "E2E tests passed"
          elif npm run test:e2e:run --if-present; then
            echo "E2E tests passed"
          else
            echo "No E2E tests found, skipping..."
          fi
      
      - name: 📊 Generate Test Coverage
        if: matrix.test-type == 'unit'
        run: |
          if npm run test:coverage --if-present; then
            echo "Coverage report generated"
          else
            echo "No coverage script found, skipping..."
          fi
      
      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.run_id }}
          path: |
            coverage/
            test-results/
            junit.xml
            *.log
          retention-days: 30
      
      - name: 📊 Upload Coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: ${{ needs.validate.outputs.project-type }}
          name: ${{ needs.validate.outputs.project-type }}-coverage
          fail_ci_if_error: false

  # ==============================================================================
  # STAGE 4: BUILD
  # ==============================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [validate, security]
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🧪 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install Dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile
          else
            npm install
          fi
      
      - name: 🔧 Lint Code
        run: |
          if npm run lint --if-present; then
            echo "Linting passed"
          else
            echo "No lint script found, skipping..."
          fi
      
      - name: 🏗️ Build Application
        run: |
          case "${{ needs.validate.outputs.project-type }}" in
            "nextjs")
              npm run build
              ;;
            "vite")
              npm run build
              ;;
            "backend")
              if npm run build --if-present; then
                echo "Backend built successfully"
              else
                echo "No build script found for backend"
              fi
              ;;
            "shared")
              npm run build
              npm run package
              ;;
            "capacitor")
              npm run build
              ;;
            *)
              if npm run build --if-present; then
                echo "Generic build completed"
              else
                echo "No build script found"
              fi
              ;;
          esac
      
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: |
            dist/
            build/
            .next/
            out/
            *.tgz
          retention-days: 30
      
      - name: 🐳 Set up Docker Buildx
        if: needs.validate.outputs.has-dockerfile == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Docker Registry
        if: needs.validate.outputs.has-dockerfile == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 🐳 Build and Push Docker Image
        if: needs.validate.outputs.has-dockerfile == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/rigger-${{ needs.validate.outputs.project-type }}:latest
            ${{ env.DOCKER_REGISTRY }}/rigger-${{ needs.validate.outputs.project-type }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================================================================
  # STAGE 5: DEPLOY STAGING
  # ==============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security, build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: ./artifacts
      
      - name: 🔧 Setup Staging Environment
        run: |
          echo "Setting up staging environment variables..."
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "API_URL=https://api-staging.rigger.tiation.net" >> $GITHUB_ENV
          echo "WEB_URL=https://staging.rigger.tiation.net" >> $GITHUB_ENV
      
      - name: 🚀 Deploy to Staging Server
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Project Type: ${{ needs.validate.outputs.project-type }}"
          echo "Environment: ${{ env.RIGGER_ENVIRONMENT }}"
          
          # Deployment logic would go here
          # This could involve SSH to servers, Kubernetes deployments, etc.
          echo "Deployment completed successfully!"
      
      - name: 🧪 Staging Health Check
        run: |
          echo "🧪 Performing staging health checks..."
          # Health check logic would go here
          echo "All health checks passed!"
      
      - name: 📧 Notify Deployment Success
        if: success()
        run: |
          echo "✅ Staging deployment successful for ${{ needs.validate.outputs.project-type }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # ==============================================================================
  # STAGE 6: DEPLOY PRODUCTION
  # ==============================================================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security, build, test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 🚀 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: ./artifacts
      
      - name: 🔧 Setup Production Environment
        run: |
          echo "Setting up production environment variables..."
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "API_URL=https://api.rigger.tiation.net" >> $GITHUB_ENV
          echo "WEB_URL=https://rigger.tiation.net" >> $GITHUB_ENV
      
      - name: 🏭 Deploy to Production Server
        run: |
          echo "🏭 Deploying to production environment..."
          echo "Project Type: ${{ needs.validate.outputs.project-type }}"
          echo "Environment: ${{ env.RIGGER_ENVIRONMENT }}"
          
          # Production deployment logic would go here
          # This should include blue-green deployment, health checks, rollback capabilities
          echo "Production deployment completed successfully!"
      
      - name: 🧪 Production Health Check
        run: |
          echo "🧪 Performing production health checks..."
          # Comprehensive health check logic would go here
          echo "All production health checks passed!"
      
      - name: 📧 Notify Deployment Success
        if: success()
        run: |
          echo "✅ Production deployment successful for ${{ needs.validate.outputs.project-type }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  # ==============================================================================
  # STAGE 7: NOTIFICATION
  # ==============================================================================
  notify:
    name: 📧 Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, security, build, test, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Generate Deployment Report
        run: |
          echo "# 🏗️ Rigger Ecosystem CI/CD Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "## 📋 Summary" >> deployment-report.md
          echo "- **Project Type**: ${{ needs.validate.outputs.project-type }}" >> deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Timestamp**: $(date)" >> deployment-report.md
          echo "- **Environment**: ${{ env.RIGGER_ENVIRONMENT }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## 🎯 Job Results" >> deployment-report.md
          echo "- **Validation**: ${{ needs.validate.result }}" >> deployment-report.md
          echo "- **Security**: ${{ needs.security.result }}" >> deployment-report.md
          echo "- **Build**: ${{ needs.build.result }}" >> deployment-report.md
          echo "- **Test**: ${{ needs.test.result }}" >> deployment-report.md
          echo "- **Staging Deploy**: ${{ needs.deploy-staging.result }}" >> deployment-report.md
          echo "- **Production Deploy**: ${{ needs.deploy-production.result }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## 🚀 Next Steps" >> deployment-report.md
          echo "Check the deployment status and verify all services are running correctly." >> deployment-report.md
          echo "" >> deployment-report.md
          echo "---" >> deployment-report.md
          echo "*Generated by Rigger Ecosystem CI/CD Pipeline*" >> deployment-report.md
          echo "*Contact: ${{ env.NOTIFICATION_EMAILS }}*" >> deployment-report.md
      
      - name: 📧 Send Success Notification
        if: success()
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Project: ${{ needs.validate.outputs.project-type }}"
          echo "All stages passed. Deployment is live."
      
      - name: 📧 Send Failure Notification
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Project: ${{ needs.validate.outputs.project-type }}"
          echo "Check the logs for details and take corrective action."
      
      - name: 📤 Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_id }}
          path: deployment-report.md
          retention-days: 90

# ==============================================================================
# CLEANUP AND MONITORING
# ==============================================================================
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
      - name: 🧹 Cleanup Temporary Resources
        run: |
          echo "🧹 Cleaning up temporary resources..."
          # Cleanup logic would go here
          echo "Cleanup completed!"
      
      - name: 📊 Update Monitoring Dashboards
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Dashboard update logic would go here
          echo "Monitoring dashboards updated!"
