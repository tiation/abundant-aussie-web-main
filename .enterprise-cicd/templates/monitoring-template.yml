# Monitoring Template
# ChaseWhiteRabbit NGO - Enterprise Monitoring & Observability

.monitoring_base: &monitoring_base
  stage: monitoring
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip3 install requests prometheus-client
  artifacts:
    expire_in: 7 days
    paths:
      - monitoring-reports/
    when: always

# Deployment Health Monitoring
monitor:health:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "üè• Monitoring deployment health..."
    
    # Application health checks
    - .enterprise-cicd/scripts/comprehensive-health-check.sh | tee monitoring-reports/health-check.log
    
    # Database connectivity
    - .enterprise-cicd/scripts/check-database-health.sh | tee monitoring-reports/database-health.log
    
    # External service dependencies
    - .enterprise-cicd/scripts/check-external-services.sh | tee monitoring-reports/external-services.log
    
    # Generate health summary
    - .enterprise-cicd/scripts/generate-health-summary.sh > monitoring-reports/health-summary.json
    
    echo "üè• Health monitoring completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Performance Monitoring
monitor:performance:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "‚ö° Monitoring application performance..."
    
    # Response time monitoring
    - .enterprise-cicd/scripts/monitor-response-times.sh | tee monitoring-reports/response-times.log
    
    # Resource utilization
    - .enterprise-cicd/scripts/monitor-resource-usage.sh | tee monitoring-reports/resource-usage.log
    
    # Error rate analysis
    - .enterprise-cicd/scripts/analyze-error-rates.sh | tee monitoring-reports/error-analysis.log
    
    # Generate performance report
    - .enterprise-cicd/scripts/generate-performance-report.sh > monitoring-reports/performance-summary.json
    
    echo "‚ö° Performance monitoring completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Log Analysis
monitor:logs:
  <<: *monitoring_base
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip3 install elasticsearch-dsl
  script:
    - mkdir -p monitoring-reports
    - echo "üìä Analyzing application logs..."
    
    # Error log analysis
    - .enterprise-cicd/scripts/analyze-error-logs.sh | tee monitoring-reports/error-logs.log
    
    # Performance log analysis
    - .enterprise-cicd/scripts/analyze-performance-logs.sh | tee monitoring-reports/performance-logs.log
    
    # Security log analysis
    - .enterprise-cicd/scripts/analyze-security-logs.sh | tee monitoring-reports/security-logs.log
    
    # Generate log insights
    - .enterprise-cicd/scripts/generate-log-insights.sh > monitoring-reports/log-insights.json
    
    echo "üìä Log analysis completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Metrics Collection
monitor:metrics:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "üìà Collecting application metrics..."
    
    # Custom application metrics
    - .enterprise-cicd/scripts/collect-app-metrics.sh | tee monitoring-reports/app-metrics.log
    
    # Business metrics
    - .enterprise-cicd/scripts/collect-business-metrics.sh | tee monitoring-reports/business-metrics.log
    
    # Infrastructure metrics
    - .enterprise-cicd/scripts/collect-infrastructure-metrics.sh | tee monitoring-reports/infrastructure-metrics.log
    
    # Generate metrics dashboard
    - .enterprise-cicd/scripts/generate-metrics-dashboard.sh > monitoring-reports/metrics-dashboard.json
    
    echo "üìà Metrics collection completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Alerting System
monitor:alerts:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "üö® Processing monitoring alerts..."
    
    # Check for critical alerts
    - .enterprise-cicd/scripts/check-critical-alerts.sh | tee monitoring-reports/critical-alerts.log
    
    # Evaluate alert conditions
    - .enterprise-cicd/scripts/evaluate-alert-conditions.sh | tee monitoring-reports/alert-evaluation.log
    
    # Send notifications if needed
    - .enterprise-cicd/scripts/send-alert-notifications.sh | tee monitoring-reports/alert-notifications.log
    
    # Update alert dashboard
    - .enterprise-cicd/scripts/update-alert-dashboard.sh | tee monitoring-reports/alert-dashboard.log
    
    echo "üö® Alert processing completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Security Monitoring
monitor:security:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "üîí Monitoring security events..."
    
    # Authentication anomalies
    - .enterprise-cicd/scripts/monitor-auth-anomalies.sh | tee monitoring-reports/auth-anomalies.log
    
    # Access pattern analysis
    - .enterprise-cicd/scripts/analyze-access-patterns.sh | tee monitoring-reports/access-patterns.log
    
    # Security incident detection
    - .enterprise-cicd/scripts/detect-security-incidents.sh | tee monitoring-reports/security-incidents.log
    
    # Generate security report
    - .enterprise-cicd/scripts/generate-security-monitoring-report.sh > monitoring-reports/security-monitoring.json
    
    echo "üîí Security monitoring completed"
  rules:
    - if: '$ENABLE_SECURITY_SCANS == "true"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Availability Monitoring
monitor:availability:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "üåê Monitoring service availability..."
    
    # Uptime monitoring
    - .enterprise-cicd/scripts/monitor-uptime.sh | tee monitoring-reports/uptime.log
    
    # Service discovery health
    - .enterprise-cicd/scripts/check-service-discovery.sh | tee monitoring-reports/service-discovery.log
    
    # Load balancer health
    - .enterprise-cicd/scripts/check-load-balancer.sh | tee monitoring-reports/load-balancer.log
    
    # Generate availability report
    - .enterprise-cicd/scripts/generate-availability-report.sh > monitoring-reports/availability-summary.json
    
    echo "üåê Availability monitoring completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Compliance Monitoring
monitor:compliance:
  <<: *monitoring_base
  script:
    - mkdir -p monitoring-reports
    - echo "‚öñÔ∏è Monitoring compliance status..."
    
    # Data privacy compliance
    - .enterprise-cicd/scripts/monitor-data-privacy.sh | tee monitoring-reports/data-privacy.log
    
    # Security compliance
    - .enterprise-cicd/scripts/monitor-security-compliance.sh | tee monitoring-reports/security-compliance.log
    
    # Audit trail monitoring
    - .enterprise-cicd/scripts/monitor-audit-trails.sh | tee monitoring-reports/audit-trails.log
    
    # Generate compliance report
    - .enterprise-cicd/scripts/generate-compliance-report.sh > monitoring-reports/compliance-summary.json
    
    echo "‚öñÔ∏è Compliance monitoring completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# Monitoring Dashboard Updates
monitor:dashboard:
  <<: *monitoring_base
  dependencies:
    - monitor:health
    - monitor:performance
    - monitor:metrics
    - monitor:availability
  script:
    - mkdir -p monitoring-reports
    - echo "üìä Updating monitoring dashboards..."
    
    # Update Grafana dashboards
    - .enterprise-cicd/scripts/update-grafana-dashboards.sh | tee monitoring-reports/grafana-update.log
    
    # Update alerting rules
    - .enterprise-cicd/scripts/update-alerting-rules.sh | tee monitoring-reports/alerting-rules.log
    
    # Update monitoring documentation
    - .enterprise-cicd/scripts/update-monitoring-docs.sh | tee monitoring-reports/monitoring-docs.log
    
    # Generate monitoring summary
    - .enterprise-cicd/scripts/generate-monitoring-summary.sh > monitoring-reports/monitoring-summary.json
    
    echo "üìä Dashboard updates completed"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Monitoring Report Generation
monitor:report:
  <<: *monitoring_base
  dependencies:
    - monitor:health
    - monitor:performance
    - monitor:logs
    - monitor:metrics
    - monitor:alerts
    - monitor:security
    - monitor:availability
    - monitor:compliance
  script:
    - mkdir -p monitoring-reports
    - echo "üìã Generating comprehensive monitoring report..."
    
    # Aggregate all monitoring data
    - .enterprise-cicd/scripts/aggregate-monitoring-data.sh
    
    # Generate executive summary
    - .enterprise-cicd/scripts/generate-executive-summary.sh > monitoring-reports/executive-summary.json
    
    # Create detailed technical report
    - .enterprise-cicd/scripts/create-technical-report.sh > monitoring-reports/technical-report.html
    
    # Send monitoring notifications
    - .enterprise-cicd/scripts/send-monitoring-notifications.sh
    
    echo "üìã Monitoring report generation completed"
  artifacts:
    expire_in: 30 days
    paths:
      - monitoring-reports/
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
