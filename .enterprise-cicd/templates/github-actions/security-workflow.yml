# Reusable Security Workflow Template
# ChaseWhiteRabbit NGO - Enterprise Security Standards
# Usage: uses: ./.enterprise-cicd/templates/github-actions/security-workflow.yml

name: 'Enterprise Security Scanning'

on:
  workflow_call:
    inputs:
      docker-image:
        description: 'Docker image to scan (optional)'
        required: false
        type: string
      severity-threshold:
        description: 'Trivy severity threshold (LOW,MEDIUM,HIGH,CRITICAL)'
        required: false
        type: string
        default: 'HIGH'
      fail-on-critical:
        description: 'Fail workflow on critical vulnerabilities'
        required: false
        type: boolean
        default: true
      upload-sarif:
        description: 'Upload SARIF results to GitHub Security'
        required: false
        type: boolean
        default: true
      enable-license-check:
        description: 'Enable license compliance checking'
        required: false
        type: boolean
        default: true
    secrets:
      DEFECTDOJO_URL:
        description: 'DefectDojo server URL'
        required: false
      DEFECTDOJO_TOKEN:
        description: 'DefectDojo API token'
        required: false
      SONAR_TOKEN:
        description: 'SonarQube token'
        required: false
      SONAR_HOST_URL:
        description: 'SonarQube host URL'
        required: false
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook for security notifications'
        required: false

env:
  SECURITY_REPORTS_DIR: security-reports
  TRIVY_CACHE_DIR: .trivy-cache

jobs:
  preparation:
    name: 'Security Preparation'
    runs-on: ubuntu-latest
    outputs:
      has-dockerfile: ${{ steps.check-files.outputs.has-dockerfile }}
      has-package-json: ${{ steps.check-files.outputs.has-package-json }}
      has-requirements-txt: ${{ steps.check-files.outputs.has-requirements-txt }}
      has-go-mod: ${{ steps.check-files.outputs.has-go-mod }}
      project-type: ${{ steps.detect-type.outputs.project-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for project files
        id: check-files
        run: |
          echo "has-dockerfile=$(test -f Dockerfile && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-package-json=$(test -f package.json && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-requirements-txt=$(test -f requirements.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "has-go-mod=$(test -f go.mod && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Detect project type
        id: detect-type
        run: |
          if [[ -f "package.json" ]]; then
            echo "project-type=nodejs" >> $GITHUB_OUTPUT
          elif [[ -f "requirements.txt" || -f "pyproject.toml" ]]; then
            echo "project-type=python" >> $GITHUB_OUTPUT
          elif [[ -f "go.mod" ]]; then
            echo "project-type=golang" >> $GITHUB_OUTPUT
          elif [[ -f "pom.xml" || -f "build.gradle" ]]; then
            echo "project-type=java" >> $GITHUB_OUTPUT
          else
            echo "project-type=generic" >> $GITHUB_OUTPUT
          fi

      - name: Create security reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

  secret-scanning:
    name: 'Secret Detection (GitLeaks)'
    runs-on: ubuntu-latest
    needs: preparation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          args: '--verbose --report-format sarif --report-path ${{ env.SECURITY_REPORTS_DIR }}/gitleaks.sarif'

      - name: Generate GitLeaks JSON report
        run: |
          docker run --rm -v "$PWD:/path" zricethezav/gitleaks:latest \
            detect --source /path --report-format json \
            --report-path /path/${{ env.SECURITY_REPORTS_DIR }}/gitleaks.json \
            --verbose || true

      - name: Upload GitLeaks SARIF
        if: inputs.upload-sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SECURITY_REPORTS_DIR }}/gitleaks.sarif
          category: gitleaks

      - name: Upload GitLeaks artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-reports
          path: ${{ env.SECURITY_REPORTS_DIR }}/gitleaks.*
          retention-days: 30

  vulnerability-scanning:
    name: 'Vulnerability Scanning (Trivy)'
    runs-on: ubuntu-latest
    needs: preparation
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

      - name: Set up Trivy cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-cache-${{ runner.os }}-${{ hashFiles('**/Dockerfile', '**/package*.json', '**/requirements*.txt', '**/go.mod', '**/pom.xml', '**/build.gradle') }}
          restore-keys: |
            trivy-cache-${{ runner.os }}-

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: '${{ env.SECURITY_REPORTS_DIR }}/trivy-fs.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Run Trivy filesystem scan (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: '${{ env.SECURITY_REPORTS_DIR }}/trivy-fs.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: '${{ env.SECURITY_REPORTS_DIR }}/trivy-config.sarif'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Set up Docker Buildx
        if: needs.preparation.outputs.has-dockerfile == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        if: needs.preparation.outputs.has-dockerfile == 'true'
        run: |
          docker build -t temp-image:${{ github.sha }} .

      - name: Run Trivy image scan
        if: needs.preparation.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'temp-image:${{ github.sha }}'
          format: 'sarif'
          output: '${{ env.SECURITY_REPORTS_DIR }}/trivy-image.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Run Trivy image scan (JSON)
        if: needs.preparation.outputs.has-dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'temp-image:${{ github.sha }}'
          format: 'json'
          output: '${{ env.SECURITY_REPORTS_DIR }}/trivy-image.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Check for critical vulnerabilities
        if: inputs.fail-on-critical
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL'
          exit-code: '1'
        env:
          TRIVY_CACHE_DIR: ${{ env.TRIVY_CACHE_DIR }}

      - name: Upload Trivy SARIF files
        if: inputs.upload-sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ env.SECURITY_REPORTS_DIR }}'
          category: trivy

      - name: Upload Trivy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: ${{ env.SECURITY_REPORTS_DIR }}/trivy-*
          retention-days: 30

  sast-scanning:
    name: 'SAST Scanning (Semgrep)'
    runs-on: ubuntu-latest
    needs: preparation
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Move Semgrep SARIF
        run: |
          mv semgrep.sarif ${{ env.SECURITY_REPORTS_DIR }}/semgrep.sarif || true

      - name: Generate Semgrep JSON report
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:latest \
            --config=auto --json --output=/src/${{ env.SECURITY_REPORTS_DIR }}/semgrep.json /src || true

      - name: Upload Semgrep SARIF
        if: inputs.upload-sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SECURITY_REPORTS_DIR }}/semgrep.sarif
          category: semgrep

      - name: Upload Semgrep artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports
          path: ${{ env.SECURITY_REPORTS_DIR }}/semgrep.*
          retention-days: 30

  license-compliance:
    name: 'License Compliance'
    runs-on: ubuntu-latest
    needs: preparation
    if: inputs.enable-license-check && needs.preparation.outputs.has-package-json == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --json --out ${{ env.SECURITY_REPORTS_DIR }}/licenses.json || true
          license-checker --csv --out ${{ env.SECURITY_REPORTS_DIR }}/licenses.csv || true
          license-checker --summary | tee ${{ env.SECURITY_REPORTS_DIR }}/license-summary.txt || true

      - name: Check for problematic licenses
        run: |
          # Create a simple license compliance check
          cat > check_licenses.py << 'EOF'
          import json
          import sys
          
          PROBLEMATIC_LICENSES = [
              'GPL-2.0', 'GPL-3.0', 'AGPL-1.0', 'AGPL-3.0',
              'LGPL-2.0', 'LGPL-2.1', 'LGPL-3.0',
              'WTFPL', 'CC-BY-NC', 'CC-BY-NC-SA'
          ]
          
          try:
              with open('${{ env.SECURITY_REPORTS_DIR }}/licenses.json', 'r') as f:
                  licenses = json.load(f)
              
              problematic = []
              for package, info in licenses.items():
                  license_name = info.get('licenses', 'Unknown')
                  if any(prob in str(license_name) for prob in PROBLEMATIC_LICENSES):
                      problematic.append((package, license_name))
              
              if problematic:
                  print("⚠️  Problematic licenses found:")
                  for package, license_name in problematic:
                      print(f"  - {package}: {license_name}")
                  with open('${{ env.SECURITY_REPORTS_DIR }}/license-issues.json', 'w') as f:
                      json.dump(problematic, f, indent=2)
              else:
                  print("✅ No problematic licenses found")
          except Exception as e:
              print(f"Error checking licenses: {e}")
          EOF
          
          python3 check_licenses.py

      - name: Upload license artifacts
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: ${{ env.SECURITY_REPORTS_DIR }}/license*
          retention-days: 30

  docker-security:
    name: 'Docker Security (Hadolint)'
    runs-on: ubuntu-latest
    needs: preparation
    if: needs.preparation.outputs.has-dockerfile == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.SECURITY_REPORTS_DIR }}

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: ${{ env.SECURITY_REPORTS_DIR }}/hadolint.sarif

      - name: Run Hadolint (JSON)
        run: |
          docker run --rm -i hadolint/hadolint:latest-alpine \
            hadolint --format json - < Dockerfile > ${{ env.SECURITY_REPORTS_DIR }}/hadolint.json || true

      - name: Upload Hadolint SARIF
        if: inputs.upload-sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SECURITY_REPORTS_DIR }}/hadolint.sarif
          category: hadolint

      - name: Upload Hadolint artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-reports
          path: ${{ env.SECURITY_REPORTS_DIR }}/hadolint.*
          retention-days: 30

  security-aggregation:
    name: 'Security Report Aggregation'
    runs-on: ubuntu-latest
    needs: [secret-scanning, vulnerability-scanning, sast-scanning, license-compliance, docker-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.SECURITY_REPORTS_DIR }}

      - name: Flatten artifact structure
        run: |
          find ${{ env.SECURITY_REPORTS_DIR }} -type f -exec mv {} ${{ env.SECURITY_REPORTS_DIR }}/ \; 2>/dev/null || true
          find ${{ env.SECURITY_REPORTS_DIR }} -type d -empty -delete 2>/dev/null || true

      - name: Generate security summary
        run: |
          cat > generate_summary.py << 'EOF'
          import json
          import os
          from datetime import datetime
          
          def load_json_report(filename):
              try:
                  with open(filename, 'r') as f:
                      return json.load(f)
              except:
                  return None
          
          # Initialize summary
          summary = {
              'timestamp': datetime.now().isoformat(),
              'repository': os.environ.get('GITHUB_REPOSITORY', 'Unknown'),
              'commit': os.environ.get('GITHUB_SHA', 'Unknown'),
              'total_issues': 0,
              'critical_issues': 0,
              'high_issues': 0,
              'medium_issues': 0,
              'low_issues': 0,
              'tools_run': [],
              'findings': {}
          }
          
          reports_dir = '${{ env.SECURITY_REPORTS_DIR }}'
          
          # Process Trivy reports
          trivy_fs = load_json_report(f'{reports_dir}/trivy-fs.json')
          if trivy_fs and 'Results' in trivy_fs:
              summary['tools_run'].append('trivy-fs')
              trivy_count = 0
              for result in trivy_fs['Results']:
                  if 'Vulnerabilities' in result:
                      for vuln in result['Vulnerabilities']:
                          severity = vuln.get('Severity', 'UNKNOWN').lower()
                          if severity == 'critical':
                              summary['critical_issues'] += 1
                          elif severity == 'high':
                              summary['high_issues'] += 1
                          elif severity == 'medium':
                              summary['medium_issues'] += 1
                          elif severity == 'low':
                              summary['low_issues'] += 1
                          trivy_count += 1
              summary['findings']['trivy'] = trivy_count
          
          # Process GitLeaks reports
          gitleaks = load_json_report(f'{reports_dir}/gitleaks.json')
          if gitleaks and isinstance(gitleaks, list):
              summary['tools_run'].append('gitleaks')
              summary['findings']['gitleaks'] = len(gitleaks)
              summary['critical_issues'] += len(gitleaks)  # All secrets are critical
          
          # Process Semgrep reports
          semgrep = load_json_report(f'{reports_dir}/semgrep.json')
          if semgrep and 'results' in semgrep:
              summary['tools_run'].append('semgrep')
              semgrep_count = len(semgrep['results'])
              summary['findings']['semgrep'] = semgrep_count
              summary['medium_issues'] += semgrep_count  # Most SAST findings are medium
          
          summary['total_issues'] = (
              summary['critical_issues'] + 
              summary['high_issues'] + 
              summary['medium_issues'] + 
              summary['low_issues']
          )
          
          # Save summary
          with open(f'{reports_dir}/security-summary.json', 'w') as f:
              json.dump(summary, f, indent=2)
          
          # Print summary
          print("🔒 SECURITY SCAN SUMMARY")
          print("=" * 50)
          print(f"Repository: {summary['repository']}")
          print(f"Commit: {summary['commit'][:8]}")
          print(f"Tools run: {', '.join(summary['tools_run'])}")
          print(f"Total issues: {summary['total_issues']}")
          print(f"  Critical: {summary['critical_issues']}")
          print(f"  High: {summary['high_issues']}")
          print(f"  Medium: {summary['medium_issues']}")
          print(f"  Low: {summary['low_issues']}")
          print("\nFindings by tool:")
          for tool, count in summary['findings'].items():
              print(f"  {tool}: {count}")
          
          # Set GitHub output for next steps
          with open(f'{os.environ["GITHUB_OUTPUT"]}', 'a') as f:
              f.write(f"total-issues={summary['total_issues']}\n")
              f.write(f"critical-issues={summary['critical_issues']}\n")
              f.write(f"high-issues={summary['high_issues']}\n")
              f.write(f"has-critical={'true' if summary['critical_issues'] > 0 else 'false'}\n")
          EOF
          
          python3 generate_summary.py

      - name: Send security notifications
        if: vars.ENABLE_SECURITY_NOTIFICATIONS == 'true' && secrets.SLACK_WEBHOOK_URL
        run: |
          SUMMARY=$(cat ${{ env.SECURITY_REPORTS_DIR }}/security-summary.json)
          CRITICAL=$(echo "$SUMMARY" | jq -r '.critical_issues')
          HIGH=$(echo "$SUMMARY" | jq -r '.high_issues')
          TOTAL=$(echo "$SUMMARY" | jq -r '.total_issues')
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            COLOR="danger"
            EMOJI="🚨"
          else
            COLOR="good"
            EMOJI="✅"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"$EMOJI Security Scan Results - ${{ github.repository }}\",
                \"fields\": [
                  {\"title\": \"Total Issues\", \"value\": \"$TOTAL\", \"short\": true},
                  {\"title\": \"Critical\", \"value\": \"$CRITICAL\", \"short\": true},
                  {\"title\": \"High\", \"value\": \"$HIGH\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\", \"short\": true}
                ]
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Upload consolidated security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-consolidated
          path: ${{ env.SECURITY_REPORTS_DIR }}
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('${{ env.SECURITY_REPORTS_DIR }}/security-summary.json', 'utf8'));
            
            const body = `## 🔒 Security Scan Results
            
            **Summary for commit:** \`${summary.commit.substring(0, 8)}\`
            
            | Severity | Count |
            |----------|-------|
            | Critical | ${summary.critical_issues} |
            | High | ${summary.high_issues} |
            | Medium | ${summary.medium_issues} |
            | Low | ${summary.low_issues} |
            | **Total** | **${summary.total_issues}** |
            
            **Tools executed:** ${summary.tools_run.join(', ')}
            
            ${summary.critical_issues > 0 ? '⚠️ **Critical vulnerabilities found!** Please review and fix before merging.' : ''}
            ${summary.total_issues === 0 ? '✅ **No security issues found!**' : ''}
            
            <details>
            <summary>Detailed Findings</summary>
            
            ${Object.entries(summary.findings).map(([tool, count]) => `- **${tool}**: ${count} findings`).join('\n')}
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  security-gate:
    name: 'Security Gate Evaluation'
    runs-on: ubuntu-latest
    needs: [security-aggregation]
    if: always()
    steps:
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports-consolidated
          path: ${{ env.SECURITY_REPORTS_DIR }}

      - name: Evaluate security gates
        run: |
          if [ -f "${{ env.SECURITY_REPORTS_DIR }}/security-summary.json" ]; then
            CRITICAL=$(jq -r '.critical_issues' ${{ env.SECURITY_REPORTS_DIR }}/security-summary.json)
            HIGH=$(jq -r '.high_issues' ${{ env.SECURITY_REPORTS_DIR }}/security-summary.json)
            
            echo "🚦 Evaluating security gates..."
            echo "Critical issues: $CRITICAL"
            echo "High issues: $HIGH"
            
            if [ "$CRITICAL" -gt 0 ] && [ "${{ inputs.fail-on-critical }}" == "true" ]; then
              echo "❌ Security gate failed: Critical vulnerabilities found"
              exit 1
            elif [ "$HIGH" -gt 10 ]; then
              echo "⚠️  Security gate warning: Many high-severity issues found"
              echo "Consider reviewing and fixing high-severity vulnerabilities"
            else
              echo "✅ Security gates passed"
            fi
          else
            echo "⚠️  No security summary found, assuming pass"
          fi
