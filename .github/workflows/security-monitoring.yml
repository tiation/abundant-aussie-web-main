name: Security and Performance Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force dependency updates'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Automated dependency updates
  dependency-updates:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.force_update == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run dependency update script
        run: |
          chmod +x scripts/update-dependencies.sh
          ./scripts/update-dependencies.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request for updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'feat: automated dependency updates'
          title: '🔄 Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates generated by our security maintenance workflow.
            
            ### Changes Made:
            - Updated npm dependencies to latest compatible versions
            - Applied security patches where available
            - Updated Docker base images
            - Ran security audits and tests
            
            ### Security Impact:
            - Vulnerabilities fixed: See audit reports in artifacts
            - Breaking changes: Automated tests passed
            
            ### Review Required:
            - [ ] Verify critical application functionality
            - [ ] Check for any breaking changes in dependencies
            - [ ] Review security audit results
            
            **Generated by**: Security Monitoring Workflow
            **Timestamp**: ${{ github.run_id }}
          branch: automated-updates
          delete-branch: true

  # Security vulnerability scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security scan script
        run: |
          chmod +x scripts/security-scan.sh
          ./scripts/security-scan.sh
        env:
          SEVERITY_THRESHOLD: HIGH
          FAIL_ON_VULNERABILITIES: false

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: /tmp/rigger-security-scans/
          retention-days: 30

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summaryPath = '/tmp/rigger-security-scans/security-summary.json';
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                
                const body = `## 🔒 Security Scan Results
                
                - **Total Issues**: ${summary.total_issues}
                - **Critical Issues**: ${summary.critical_issues}
                - **High Issues**: ${summary.high_issues}
                - **Scan Date**: ${summary.timestamp}
                
                ${summary.critical_issues > 0 ? '⚠️ **Critical vulnerabilities found!** Please review before merging.' : '✅ No critical vulnerabilities detected.'}
                
                **Detailed results available in workflow artifacts.**`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Could not read security summary:', error.message);
            }

  # Docker image security scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: 
          - RiggerConnect-capacitor/Dockerfile
          - docker-compose.dev.yml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: ${{ matrix.dockerfile }}
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile }}.sarif'

  # Performance monitoring setup
  performance-monitoring:
    name: Performance Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start monitoring stack
        run: |
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml up -d prometheus grafana

      - name: Wait for services to start
        run: sleep 30

      - name: Run performance baseline tests
        run: |
          # Install performance testing tools
          npm install -g lighthouse artillery
          
          # Basic performance checks
          echo "Testing application performance..."
          
          # You can add specific performance tests here
          # Example: artillery quick --count 10 --num 5 http://localhost:3000
          
          echo "Performance baseline completed"

      - name: Cleanup monitoring stack
        if: always()
        run: |
          cd monitoring
          docker-compose -f docker-compose.monitoring.yml down

  # Infrastructure health checks
  infrastructure-health:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check VPS connectivity
        run: |
          # Test connectivity to your VPS servers
          echo "Checking VPS server connectivity..."
          
          servers=("docker.sxc.codes" "helm.sxc.codes" "grafana.sxc.codes" "gitlab.sxc.codes" "supabase.sxc.codes")
          
          for server in "${servers[@]}"; do
            echo "Testing $server..."
            if ping -c 1 "$server" > /dev/null 2>&1; then
              echo "✅ $server is reachable"
            else
              echo "❌ $server is unreachable"
            fi
          done

      - name: Check SSL certificates
        run: |
          echo "Checking SSL certificate expiration..."
          
          domains=("api.sxc.codes" "riggerconnect.sxc.codes" "riggerhub.sxc.codes")
          
          for domain in "${domains[@]}"; do
            echo "Checking $domain..."
            expiry=$(echo | openssl s_client -servername "$domain" -connect "$domain:443" 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
            echo "Certificate for $domain expires: $expiry"
          done

      - name: Send health report
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚨 Infrastructure Health Check Failed!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            
            Please check the workflow logs for details.

  # Cleanup old workflow runs
  cleanup-workflow-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10
