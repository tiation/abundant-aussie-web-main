# ZeroTier Network Configuration
# Central configuration for all ZeroTier networks used in Tiation infrastructure

# Main Production Network
# This is the primary network that all production servers should join
TIATION_MAIN_NETWORK=""           # Network ID: [TO BE CONFIGURED]
TIATION_MAIN_NAME="Tiation-Main"
TIATION_MAIN_SUBNET="172.22.248.0/24"
TIATION_MAIN_DESCRIPTION="Main production network for Tiation infrastructure"

# Development Network
# For development servers and testing
TIATION_DEV_NETWORK=""            # Network ID: [TO BE CONFIGURED]
TIATION_DEV_NAME="Tiation-Dev"
TIATION_DEV_SUBNET="172.23.248.0/24"
TIATION_DEV_DESCRIPTION="Development and testing network"

# Staging Network
# For staging deployments and pre-production testing
TIATION_STAGING_NETWORK=""        # Network ID: [TO BE CONFIGURED]
TIATION_STAGING_NAME="Tiation-Staging"
TIATION_STAGING_SUBNET="172.24.248.0/24"
TIATION_STAGING_DESCRIPTION="Staging and pre-production network"

# Management Network
# For administrative and monitoring systems
TIATION_MGMT_NETWORK=""           # Network ID: [TO BE CONFIGURED]
TIATION_MGMT_NAME="Tiation-Management"
TIATION_MGMT_SUBNET="172.25.248.0/24"
TIATION_MGMT_DESCRIPTION="Management and monitoring network"

# Network Security Settings
ZEROTIER_AUTH_REQUIRED=true       # Require manual authorization for new nodes
ZEROTIER_BRIDGE_MODE=false        # Enable bridging to physical networks
ZEROTIER_BROADCAST=true           # Allow broadcast traffic
ZEROTIER_MULTICAST=true           # Allow multicast traffic
ZEROTIER_IPV6=true                # Enable IPv6 support

# Node Management
DEFAULT_NODE_PREFIX="tiation"     # Prefix for node names
AUTO_ASSIGN_IP=true               # Automatically assign IPs from pool
DNS_SERVERS=("8.8.8.8" "8.8.4.4" "1.1.1.1")  # DNS servers to push to clients

# Monitoring and Alerting
MONITOR_NETWORK_HEALTH=true       # Monitor network connectivity
PEER_PING_INTERVAL=60            # Seconds between peer connectivity checks
NETWORK_ALERT_THRESHOLD=5        # Alert if node can't reach this many peers
CONNECTION_TIMEOUT=30            # Timeout for connectivity tests

# Network Routes (if needed)
# Format: "destination/mask via gateway"
CUSTOM_ROUTES=(
    # "10.0.0.0/8 via 172.22.248.1"
    # "192.168.0.0/16 via 172.22.248.1"
)

# Quality of Service (if supported)
QOS_ENABLED=false                # Enable QoS rules
QOS_RULES=(
    # "tcp/22 priority high"      # SSH traffic
    # "tcp/443 priority high"     # HTTPS traffic
    # "tcp/80 priority medium"    # HTTP traffic
)

# Node Roles and Tags
# Define node roles for automatic tagging and rule application
declare -A NODE_ROLES=(
    ["gateway"]="network-gateway,monitoring"
    ["gitlab"]="source-control,ci-cd"
    ["grafana"]="monitoring,dashboard"
    ["docker-registry"]="container-registry"
    ["k8s-master"]="kubernetes,master"
    ["k8s-worker"]="kubernetes,worker"
    ["database"]="database,persistent-storage"
    ["cache"]="redis,cache"
    ["web"]="web-server,frontend"
    ["api"]="api-server,backend"
)

# IP Address Assignments
# Predefined IP assignments for specific node types
declare -A STATIC_IPS=(
    ["gateway"]="172.22.248.1"
    ["gitlab"]="172.22.248.10"
    ["grafana"]="172.22.248.20"
    ["docker-registry"]="172.22.248.30"
    ["k8s-master"]="172.22.248.40"
    ["k8s-worker-1"]="172.22.248.41"
    ["k8s-worker-2"]="172.22.248.42"
    ["database-primary"]="172.22.248.50"
    ["database-replica"]="172.22.248.51"
    ["redis-primary"]="172.22.248.60"
    ["redis-replica"]="172.22.248.61"
)

# Network Rules (Flow Rules)
# Define traffic rules for the network
FLOW_RULES=(
    # Allow SSH from anywhere
    "accept tcp 22"
    
    # Allow HTTP/HTTPS traffic
    "accept tcp 80"
    "accept tcp 443"
    
    # Allow GitLab specific ports
    "accept tcp 8080"   # GitLab web interface
    "accept tcp 2222"   # GitLab SSH
    
    # Allow Kubernetes API
    "accept tcp 6443"   # Kubernetes API server
    
    # Allow Docker Registry
    "accept tcp 5000"   # Docker Registry
    
    # Allow monitoring ports
    "accept tcp 3000"   # Grafana
    "accept tcp 9090"   # Prometheus
    "accept tcp 9100"   # Node Exporter
    
    # Allow database connections
    "accept tcp 5432"   # PostgreSQL
    "accept tcp 3306"   # MySQL
    "accept tcp 6379"   # Redis
    
    # Allow ZeroTier control traffic
    "accept udp 9993"   # ZeroTier protocol
    
    # Default deny (uncomment to enable strict mode)
    # "drop"
)

# Backup and Recovery
BACKUP_NETWORK_CONFIG=true        # Backup network configuration
CONFIG_BACKUP_PATH="/opt/backups/zerotier"
NETWORK_CONFIG_RETENTION=30       # Days to keep network config backups

# Integration Settings
INTEGRATE_WITH_DNS=false          # Integrate with DNS server
DNS_DOMAIN="tiation.internal"     # Internal domain name
INTEGRATE_WITH_MONITORING=true    # Send network metrics to monitoring
PROMETHEUS_METRICS=true           # Export Prometheus metrics

# Logging
ZEROTIER_LOG_LEVEL="info"         # Log level: debug, info, warning, error
LOG_NETWORK_EVENTS=true           # Log network join/leave events
LOG_PEER_EVENTS=true              # Log peer connect/disconnect events
AUDIT_NETWORK_CHANGES=true        # Audit network configuration changes

# Helper functions for network management
# These can be sourced by other scripts

# Get network ID by name
get_network_id() {
    local network_name="$1"
    case "$network_name" in
        "main"|"production")
            echo "$TIATION_MAIN_NETWORK"
            ;;
        "dev"|"development")
            echo "$TIATION_DEV_NETWORK"
            ;;
        "staging"|"stage")
            echo "$TIATION_STAGING_NETWORK"
            ;;
        "mgmt"|"management")
            echo "$TIATION_MGMT_NETWORK"
            ;;
        *)
            echo ""
            ;;
    esac
}

# Get static IP for node role
get_static_ip() {
    local role="$1"
    echo "${STATIC_IPS[$role]:-}"
}

# Get node tags for role
get_node_tags() {
    local role="$1"
    echo "${NODE_ROLES[$role]:-}"
}
