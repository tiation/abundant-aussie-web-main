#!/bin/bash

# Setup Version Control for RiggerConnect Components
# This script creates separate Git repositories for each component while maintaining the main repository

set -e

echo "🔧 Setting up Version Control for RiggerConnect Components"
echo "========================================================="

# Define the main repository path
MAIN_REPO_PATH="/Users/tiaastor/tiation-github/RiggerConnect-RiggerJobs-Workspace-PB"
COMPONENTS_BASE_PATH="/Users/tiaastor/tiation-github"

# Define components that need separate repositories
COMPONENTS=(
    "RiggerConnect"
    "RiggerConnect-RiggerJobs-Workspace"
    "RiggerConnectApp"
    "RiggerConnectMobileApp"
    "RiggerJobsApp"
    "AutomationServer"
    "MetricsDashboard"
    "Infrastructure"
    "Shared"
)

echo "📁 Main repository: $MAIN_REPO_PATH"
echo "📦 Components to be separated: ${COMPONENTS[*]}"
echo ""

# Function to create a separate repository for a component
create_component_repo() {
    local component=$1
    local component_path="$COMPONENTS_BASE_PATH/rigger-connect-$component"
    
    echo "🔄 Processing component: $component"
    
    # Create the component directory outside main repo
    if [ ! -d "$component_path" ]; then
        mkdir -p "$component_path"
        echo "  ✅ Created directory: $component_path"
    fi
    
    # Copy component files to the new location
    if [ -d "$MAIN_REPO_PATH/$component" ]; then
        cp -r "$MAIN_REPO_PATH/$component"/* "$component_path/" 2>/dev/null || true
        echo "  ✅ Copied component files"
    else
        echo "  ⚠️  Component directory not found: $MAIN_REPO_PATH/$component"
    fi
    
    # Initialize Git repository
    cd "$component_path"
    if [ ! -d ".git" ]; then
        git init
        echo "  ✅ Initialized Git repository"
    fi
    
    # Create .gitignore based on component type
    create_gitignore "$component" "$component_path"
    
    # Create README.md for the component
    create_component_readme "$component" "$component_path"
    
    # Add all files and make initial commit
    git add .
    if git diff --cached --quiet; then
        echo "  ℹ️  No changes to commit"
    else
        git commit -m "Initial commit for $component component"
        echo "  ✅ Created initial commit"
    fi
    
    echo "  ✅ Component repository created: $component_path"
    echo ""
}

# Function to create appropriate .gitignore for each component
create_gitignore() {
    local component=$1
    local path=$2
    
    cat > "$path/.gitignore" << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Build directories
build/
dist/

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
Thumbs.db
EOF

    # Add component-specific ignores
    case $component in
        "RiggerConnectMobileApp")
            cat >> "$path/.gitignore" << EOF

# React Native
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
web-build/

# macOS
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

# Android/IntelliJ
build/
.idea
.gradle
local.properties
*.iml

# Xcode
*.pbxuser
*.mode1v3
*.mode2v3
*.perspectivev3
*.xcuserstate
project.xcworkspace/
xcuserdata/
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate

# CocoaPods
Pods/
EOF
            ;;
        "Infrastructure")
            cat >> "$path/.gitignore" << EOF

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Ansible
*.retry

# Docker
.dockerignore
EOF
            ;;
        "AutomationServer")
            cat >> "$path/.gitignore" << EOF

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
ENV/
env/
.env
EOF
            ;;
    esac
}

# Function to create component-specific README
create_component_readme() {
    local component=$1
    local path=$2
    
    cat > "$path/README.md" << EOF
# $component

Enterprise-grade component for the RiggerConnect platform.

## Overview

This component is part of the RiggerConnect ecosystem, designed for professional workflow management and rigger job coordination.

## Architecture

![Architecture Diagram](./docs/architecture-diagram.png)

### Component Structure

\`\`\`
$component/
├── src/           # Source code
├── docs/          # Documentation
├── tests/         # Test files
├── config/        # Configuration files
└── scripts/       # Utility scripts
\`\`\`

## Installation

\`\`\`bash
# Clone the repository
git clone https://github.com/yourusername/rigger-connect-$component.git
cd rigger-connect-$component

# Install dependencies
npm install

# Setup environment
cp .env.example .env
# Edit .env with your configuration
\`\`\`

## Usage

### Development

\`\`\`bash
# Start development server
npm run dev

# Run tests
npm test

# Build for production
npm run build
\`\`\`

### Production Deployment

\`\`\`bash
# Build and deploy
npm run build
npm run deploy
\`\`\`

## Documentation

- [API Documentation](./docs/api.md)
- [Deployment Guide](./docs/deployment.md)
- [Contributing Guidelines](./CONTRIBUTING.md)

## Features

- ✅ Enterprise-grade architecture
- ✅ Streamlined workflow management
- ✅ Professional documentation
- ✅ Automated testing and deployment
- ✅ Scalable infrastructure

## Dependencies

This component integrates with:
- Main RiggerConnect platform
- Shared utilities and services
- External APIs and services

## Contributing

Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details.

## Support

For support and questions, please contact the development team or create an issue in the repository.

---

**RiggerConnect $component** - Professional workflow management for rigger operations.
EOF
}

# Function to update main repository structure
update_main_repo() {
    echo "🔄 Updating main repository structure"
    
    cd "$MAIN_REPO_PATH"
    
    # Create .gitmodules file for submodules
    cat > .gitmodules << EOF
# RiggerConnect Component Submodules
# This file tracks the separate repositories for each component

EOF
    
    # Create main repository README update
    cat > component-repositories.md << EOF
# Component Repositories

This document lists all the separate repositories for RiggerConnect components.

## Main Repository
- **RiggerConnect-RiggerJobs-Workspace-PB**: Main orchestration repository
  - Location: \`/Users/tiaastor/tiation-github/RiggerConnect-RiggerJobs-Workspace-PB\`
  - Purpose: Overarching structure and dependency management

## Component Repositories

EOF
    
    for component in "${COMPONENTS[@]}"; do
        echo "- **rigger-connect-$component**: $component component" >> component-repositories.md
        echo "  - Location: \`/Users/tiaastor/tiation-github/rigger-connect-$component\`" >> component-repositories.md
        echo "  - Purpose: Independent development and deployment" >> component-repositories.md
        echo "" >> component-repositories.md
    done
    
    echo "  ✅ Created component repositories documentation"
}

# Main execution
main() {
    echo "🚀 Starting version control setup..."
    echo ""
    
    # Create separate repositories for each component
    for component in "${COMPONENTS[@]}"; do
        create_component_repo "$component"
    done
    
    # Update main repository
    update_main_repo
    
    echo "✅ Version control setup completed!"
    echo ""
    echo "📋 Summary:"
    echo "- Main repository: RiggerConnect-RiggerJobs-Workspace-PB"
    echo "- Component repositories: ${#COMPONENTS[@]} created"
    echo "- All repositories initialized with Git"
    echo "- Professional documentation added to each component"
    echo ""
    echo "🔗 Next Steps:"
    echo "1. Review each component repository"
    echo "2. Set up remote repositories (GitHub/GitLab)"
    echo "3. Configure CI/CD pipelines"
    echo "4. Set up branch protection rules"
    echo "5. Configure dependency management between components"
}

# Execute main function
main "$@"
