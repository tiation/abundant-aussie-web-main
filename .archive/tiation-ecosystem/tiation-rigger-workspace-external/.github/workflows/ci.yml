name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '5.0'
  REDIS_VERSION: '6.2'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm test
        env:
          MONGO_URI: mongodb://localhost:27017/riggerconnect_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:e2e
        env:
          MONGO_URI: mongodb://localhost:27017/riggerconnect_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Generate test coverage
        run: npm run test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:backend

      - name: Build artifacts
        run: |
          mkdir -p build-artifacts
          cp -r dist build-artifacts/
          cp package.json build-artifacts/
          cp package-lock.json build-artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build-artifacts/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security-audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.riggerconnect.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build-artifacts/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: aws s3 sync build-artifacts/ s3://staging-bucket/
          # Example: aws ecs update-service --cluster staging --service riggerconnect-api

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://riggerconnect.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build-artifacts/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
          # Example: aws s3 sync build-artifacts/ s3://production-bucket/
          # Example: aws ecs update-service --cluster production --service riggerconnect-api

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          message: 'üöÄ Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          message: '‚ùå Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  mobile-build:
    name: Build Mobile Apps
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        platform: [android, ios]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Java (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Build Android app
        if: matrix.platform == 'android'
        run: |
          cd RiggerConnectApp/android
          ./gradlew assembleRelease

      - name: Setup Xcode (iOS)
        if: matrix.platform == 'ios' && runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS app
        if: matrix.platform == 'ios' && runner.os == 'macOS'
        run: |
          cd RiggerConnectApp/ios
          xcodebuild -workspace RiggerConnect.xcworkspace -scheme RiggerConnect -configuration Release -sdk iphoneos

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            riggerconnect/api:latest
            riggerconnect/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add your performance testing commands here
          # Example: k6 run performance-tests/load-test.js

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://staging.riggerconnect.com
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
