name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.sxc.codes
  IMAGE_NAME: lovable-clone

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Run linting
      run: npm run lint
      continue-on-error: true
      
    - name: Run tests
      run: npm test  
      continue-on-error: true
      
    - name: Build application
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: docker.tiation.net
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          docker stop lovable-clone-staging || true
          docker rm lovable-clone-staging || true
          docker run -d \
            --name lovable-clone-staging \
            --restart unless-stopped \
            -p 8080:80 \
            -e NODE_ENV=staging \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: docker.sxc.codes
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker stop lovable-clone-prod || true
          docker rm lovable-clone-prod || true
          docker run -d \
            --name lovable-clone-prod \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            -e NODE_ENV=production \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
  notify:
    runs-on: ubuntu-latest
    name: Notification
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
