name: RiggerConnect CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === QUALITY ASSURANCE ===
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [riggerconnect, '@riggerhub/web', '@rigger/backend']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check
        run: npm run type-check -w ${{ matrix.workspace }}

      - name: Lint code
        run: npm run lint -w ${{ matrix.workspace }}

      - name: Format check
        run: npm run format:check

      - name: Run tests
        run: npm run test -w ${{ matrix.workspace }}
        env:
          CI: true

      - name: Upload coverage reports
        if: matrix.workspace == '@rigger/backend'
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/riggerbackend/coverage/lcov.info
          flags: backend

  # === BUILD ===
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        workspace: [riggerconnect, '@riggerhub/web', '@rigger/backend']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build -w ${{ matrix.workspace }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.workspace }}
          path: |
            packages/*/dist/
            packages/*/build/
          retention-days: 1

  # === SECURITY SCANNING ===
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # === DOCKER BUILD ===
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [backend, riggerconnect, riggerhub]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/${{ matrix.service == 'backend' && 'riggerbackend' || matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # === DEPLOYMENT ===
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            # Navigate to deployment directory
            cd /opt/riggerconnect-monorepo
            
            # Pull latest changes
            git pull origin main
            
            # Pull latest Docker images
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker-compose pull
            
            # Deploy with zero-downtime
            docker-compose up -d --no-deps backend riggerconnect riggerhub
            
            # Health check
            sleep 30
            curl -f http://localhost:3000/health || exit 1
            curl -f http://localhost:3001/ || exit 1
            curl -f http://localhost:3002/ || exit 1
            
            # Cleanup old images
            docker image prune -f

  # === NOTIFICATION ===
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            RiggerConnect deployment ${{ job.status }}!
            
            üöÄ Environment: Production
            üìù Commit: ${{ github.sha }}
            üë§ Author: ${{ github.actor }}
            üîó Repository: ${{ github.repository }}
            
            View deployment: https://riggerconnect.sxc.codes
